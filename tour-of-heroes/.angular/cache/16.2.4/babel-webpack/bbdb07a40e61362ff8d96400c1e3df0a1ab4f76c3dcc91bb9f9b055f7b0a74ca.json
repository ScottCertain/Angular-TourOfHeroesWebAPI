{"ast":null,"code":"import { of } from 'rxjs';\nimport { HEROES } from './mock-heroes';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class HeroService {\n  constructor(messageService, http) {\n    this.messageService = messageService;\n    this.http = http;\n  }\n  getHeroes() {\n    const heroes = of(HEROES);\n    this.messageService.add('HeroService: fetched heroes');\n    return heroes;\n  }\n  getHero(id) {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h => h.id === id);\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n  /** Log a HeroService message with the MessageService */\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  static #_ = this.ɵfac = function HeroService_Factory(t) {\n    return new (t || HeroService)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HeroService,\n    factory: HeroService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["of","HEROES","HeroService","constructor","messageService","http","getHeroes","heroes","add","getHero","id","hero","find","h","log","message","_","i0","ɵɵinject","i1","MessageService","i2","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\Library\\Documents\\__Source\\TourOfHeroes\\tour-of-heroes\\src\\app\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeroService {\n\n  constructor(private messageService: MessageService, private http: HttpClient) { }\n\n  getHeroes(): Observable<Hero[]> {\n    const heroes = of(HEROES);\n    this.messageService.add('HeroService: fetched heroes');\n    return heroes;\n  }\n\n  getHero(id: number): Observable<Hero> {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h => h.id === id)!;\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n\n  /** Log a HeroService message with the MessageService */\nprivate log(message: string) {\n  this.messageService.add(`HeroService: ${message}`);\n}\n}\n"],"mappings":"AACA,SAAqBA,EAAE,QAAQ,MAAM;AAIrC,SAASC,MAAM,QAAQ,eAAe;;;;AAMtC,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,cAA8B,EAAUC,IAAgB;IAAxD,KAAAD,cAAc,GAAdA,cAAc;IAA0B,KAAAC,IAAI,GAAJA,IAAI;EAAgB;EAEhFC,SAASA,CAAA;IACP,MAAMC,MAAM,GAAGP,EAAE,CAACC,MAAM,CAAC;IACzB,IAAI,CAACG,cAAc,CAACI,GAAG,CAAC,6BAA6B,CAAC;IACtD,OAAOD,MAAM;EACf;EAEAE,OAAOA,CAACC,EAAU;IAChB;IACA;IACA,MAAMC,IAAI,GAAGV,MAAM,CAACW,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAE;IAC3C,IAAI,CAACN,cAAc,CAACI,GAAG,CAAC,gCAAgCE,EAAE,EAAE,CAAC;IAC7D,OAAOV,EAAE,CAACW,IAAI,CAAC;EACjB;EAEA;EACMG,GAAGA,CAACC,OAAe;IACzB,IAAI,CAACX,cAAc,CAACI,GAAG,CAAC,gBAAgBO,OAAO,EAAE,CAAC;EACpD;EAAC,QAAAC,CAAA,G;qBArBYd,WAAW,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXrB,WAAW;IAAAsB,OAAA,EAAXtB,WAAW,CAAAuB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}