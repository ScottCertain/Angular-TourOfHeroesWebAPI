{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ConfigService {\n  constructor(http) {\n    this.http = http;\n    this.options = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      }),\n      params: new HttpParams()\n      // Add other defaults as needed\n      // responseType: 'json',\n      // observe: 'body',\n    };\n\n    this.configUrl = 'assets/config.json';\n  }\n  getConfig() {\n    return this.http.get(this.configUrl);\n  }\n  getConfigResponse() {\n    return this.http.get(this.configUrl, {\n      observe: 'response'\n    });\n  }\n  // Error handling function\n  handleError(error) {\n    // In a real-world app, you may send the error to some remote logging infrastructure\n    // For now, let's log it to the console\n    console.error(error);\n    return throwError(error);\n  }\n  static #_ = this.ɵfac = function ConfigService_Factory(t) {\n    return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConfigService,\n    factory: ConfigService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","HttpParams","throwError","ConfigService","constructor","http","options","headers","params","configUrl","getConfig","get","getConfigResponse","observe","handleError","error","console","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\Library\\Documents\\__Source\\TourOfHeroesWebAPI\\tour-of-heroes\\src\\app\\config\\config.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\n\nimport { Config } from './config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigService {\n\n  options = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    }),\n    params: new HttpParams(),\n    // Add other defaults as needed\n    // responseType: 'json',\n    // observe: 'body',\n  };\n\n  configUrl = 'assets/config.json';\n\n  constructor(private http: HttpClient) { }\n\n  getConfig() {\n    return this.http.get<Config>(this.configUrl);\n  }\n\n  getConfigResponse(): Observable<HttpResponse<Config>> {\n    return this.http.get<Config>(\n      this.configUrl, { observe: 'response' });\n  }\n\n  // Error handling function\n  private handleError(error: any) {\n    // In a real-world app, you may send the error to some remote logging infrastructure\n    // For now, let's log it to the console\n    console.error(error);\n    return throwError(error);\n  }\n}\n"],"mappings":"AACA,SAAqBA,WAAW,EAAEC,UAAU,QAAsB,sBAAsB;AACxF,SAAqBC,UAAU,QAAQ,MAAM;;;AAQ7C,OAAM,MAAOC,aAAa;EAcxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAZxB,KAAAC,OAAO,GAAG;MACRC,OAAO,EAAE,IAAIP,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB,CAAC;MACFQ,MAAM,EAAE,IAAIP,UAAU;MACtB;MACA;MACA;KACD;;IAED,KAAAQ,SAAS,GAAG,oBAAoB;EAEQ;EAExCC,SAASA,CAAA;IACP,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAS,IAAI,CAACF,SAAS,CAAC;EAC9C;EAEAG,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACP,IAAI,CAACM,GAAG,CAClB,IAAI,CAACF,SAAS,EAAE;MAAEI,OAAO,EAAE;IAAU,CAAE,CAAC;EAC5C;EAEA;EACQC,WAAWA,CAACC,KAAU;IAC5B;IACA;IACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,OAAOb,UAAU,CAACa,KAAK,CAAC;EAC1B;EAAC,QAAAE,CAAA,G;qBA/BUd,aAAa,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAbnB,aAAa;IAAAoB,OAAA,EAAbpB,aAAa,CAAAqB,IAAA;IAAAC,UAAA,EAFZ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}