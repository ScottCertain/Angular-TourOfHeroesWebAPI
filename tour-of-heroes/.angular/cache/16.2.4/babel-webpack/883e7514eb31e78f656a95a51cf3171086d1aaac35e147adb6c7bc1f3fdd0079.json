{"ast":null,"code":"import { of } from 'rxjs';\nimport { HEROES } from './mock-heroes';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nexport class HeroService {\n  constructor(messageService) {\n    this.messageService = messageService;\n  }\n  getHeroes() {\n    const heroes = of(HEROES);\n    this.messageService.add('HeroService: fetched heroes');\n    return heroes;\n  }\n  getHero(id) {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h => h.id === id);\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n  static #_ = this.ɵfac = function HeroService_Factory(t) {\n    return new (t || HeroService)(i0.ɵɵinject(i1.MessageService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HeroService,\n    factory: HeroService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["of","HEROES","HeroService","constructor","messageService","getHeroes","heroes","add","getHero","id","hero","find","h","_","i0","ɵɵinject","i1","MessageService","_2","factory","ɵfac","providedIn"],"sources":["D:\\Library\\Documents\\__Source\\TourOfHeroes\\tour-of-heroes\\src\\app\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeroService {\n\n  constructor(private messageService: MessageService) { }\n\n  getHeroes(): Observable<Hero[]> {\n    const heroes = of(HEROES);\n    this.messageService.add('HeroService: fetched heroes');\n    return heroes;\n  }\n\n  getHero(id: number): Observable<Hero> {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h => h.id === id)!;\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n}\n"],"mappings":"AACA,SAAqBA,EAAE,QAAQ,MAAM;AAIrC,SAASC,MAAM,QAAQ,eAAe;;;AAMtC,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;EAAoB;EAEtDC,SAASA,CAAA;IACP,MAAMC,MAAM,GAAGN,EAAE,CAACC,MAAM,CAAC;IACzB,IAAI,CAACG,cAAc,CAACG,GAAG,CAAC,6BAA6B,CAAC;IACtD,OAAOD,MAAM;EACf;EAEAE,OAAOA,CAACC,EAAU;IAChB;IACA;IACA,MAAMC,IAAI,GAAGT,MAAM,CAACU,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAE;IAC3C,IAAI,CAACL,cAAc,CAACG,GAAG,CAAC,gCAAgCE,EAAE,EAAE,CAAC;IAC7D,OAAOT,EAAE,CAACU,IAAI,CAAC;EACjB;EAAC,QAAAG,CAAA,G;qBAhBUX,WAAW,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXhB,WAAW;IAAAiB,OAAA,EAAXjB,WAAW,CAAAkB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}