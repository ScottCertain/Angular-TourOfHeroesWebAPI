{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { HEROES } from './mock-heroes';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class HeroService {\n  constructor(messageService, http) {\n    this.messageService = messageService;\n    this.http = http;\n    this.heroesUrl = 'api/heroes'; // URL to web api\n  }\n\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(tap(_ => this.log('fetched heroes')), catchError(this.handleError('getHeroes', [])));\n  }\n  getHero(id) {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h => h.id === id);\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n  /**\n  * Handle Http operation that failed.\n  * Let the app continue.\n  *\n  * @param operation - name of the operation that failed\n  * @param result - optional value to return as the observable result\n  */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** Log a HeroService message with the MessageService */\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  static #_ = this.ɵfac = function HeroService_Factory(t) {\n    return new (t || HeroService)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HeroService,\n    factory: HeroService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["of","catchError","tap","HEROES","HeroService","constructor","messageService","http","heroesUrl","getHeroes","get","pipe","_","log","handleError","getHero","id","hero","find","h","add","operation","result","error","console","message","i0","ɵɵinject","i1","MessageService","i2","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\Library\\Documents\\__Source\\TourOfHeroes\\tour-of-heroes\\src\\app\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeroService {\n\n  private heroesUrl = 'api/heroes';  // URL to web api\n\n  constructor(private messageService: MessageService, private http: HttpClient) { }\n\n  getHeroes(): Observable<Hero[]> {\n    return this.http.get<Hero[]>(this.heroesUrl)\n      .pipe(\n        tap(_=> this.log('fetched heroes')),\n        catchError(this.handleError<Hero[]>('getHeroes', []))\n      );\n  }\n\n  getHero(id: number): Observable<Hero> {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h => h.id === id)!;\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n\n  /**\n * Handle Http operation that failed.\n * Let the app continue.\n *\n * @param operation - name of the operation that failed\n * @param result - optional value to return as the observable result\n */\nprivate handleError<T>(operation = 'operation', result?: T) {\n  return (error: any): Observable<T> => {\n\n    // TODO: send the error to remote logging infrastructure\n    console.error(error); // log to console instead\n\n    // TODO: better job of transforming error for user consumption\n    this.log(`${operation} failed: ${error.message}`);\n\n    // Let the app keep running by returning an empty result.\n    return of(result as T);\n  };\n}\n\n  /** Log a HeroService message with the MessageService */\n  private log(message: string) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n}\n"],"mappings":"AACA,SAAqBA,EAAE,QAAQ,MAAM;AAErC,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;AAGrD,SAASC,MAAM,QAAQ,eAAe;;;;AAMtC,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,cAA8B,EAAUC,IAAgB;IAAxD,KAAAD,cAAc,GAAdA,cAAc;IAA0B,KAAAC,IAAI,GAAJA,IAAI;IAFxD,KAAAC,SAAS,GAAG,YAAY,CAAC,CAAE;EAE6C;;EAEhFC,SAASA,CAAA;IACP,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAS,IAAI,CAACF,SAAS,CAAC,CACzCG,IAAI,CACHT,GAAG,CAACU,CAAC,IAAG,IAAI,CAACC,GAAG,CAAC,gBAAgB,CAAC,CAAC,EACnCZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAS,WAAW,EAAE,EAAE,CAAC,CAAC,CACtD;EACL;EAEAC,OAAOA,CAACC,EAAU;IAChB;IACA;IACA,MAAMC,IAAI,GAAGd,MAAM,CAACe,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAE;IAC3C,IAAI,CAACV,cAAc,CAACc,GAAG,CAAC,gCAAgCJ,EAAE,EAAE,CAAC;IAC7D,OAAOhB,EAAE,CAACiB,IAAI,CAAC;EACjB;EAEA;;;;;;;EAOMH,WAAWA,CAAIO,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACA,IAAI,CAACV,GAAG,CAAC,GAAGQ,SAAS,YAAYE,KAAK,CAACE,OAAO,EAAE,CAAC;MAEjD;MACA,OAAOzB,EAAE,CAACsB,MAAW,CAAC;IACxB,CAAC;EACH;EAEE;EACQT,GAAGA,CAACY,OAAe;IACzB,IAAI,CAACnB,cAAc,CAACc,GAAG,CAAC,gBAAgBK,OAAO,EAAE,CAAC;EACpD;EAAC,QAAAb,CAAA,G;qBA9CUR,WAAW,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX5B,WAAW;IAAA6B,OAAA,EAAX7B,WAAW,CAAA8B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}