{"ast":null,"code":"import { of } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class HeroService {\n  constructor(messageService, http) {\n    this.messageService = messageService;\n    this.http = http;\n    this.heroesUrl = 'api/heroes'; // URL to web api\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(tap(_ => this.log('fetched heroes')), catchError(this.handleError('getHeroes', [])));\n  }\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id) {\n    const url = `${this.heroesUrl}/${id}`; // backticks ( ` ) define a JavaScript template literal for embedding the id.\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched hero id=${id}`)), catchError(this.handleError(`getHero id=${id}`)));\n  }\n  /**\n  * Handle Http operation that failed.\n  * Let the app continue.\n  *\n  * @param operation - name of the operation that failed\n  * @param result - optional value to return as the observable result\n  */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** Log a HeroService message with the MessageService */\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  /** PUT: update the hero on the server */\n  updateHero(hero) {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(tap(_ => this.log(`updated hero id=${hero.id}`)), catchError(this.handleError('updateHero')));\n  }\n  /** POST: add a new hero to the server */\n  addHero(hero) {\n    return this.http.post(this.heroesUrl, hero, this.httpOptions).pipe(tap(newHero => this.log(`added hero w/ id=${newHero.id}`)), catchError(this.handleError('addHero')));\n  }\n  /** DELETE: delete the hero from the server */\n  deleteHero(id) {\n    const url = `${this.heroesUrl}/${id}`; // backticks ( ` ) define a JavaScript template literal for embedding the id.\n    return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log(`deleted hero id=${id}`)), catchError(this.handleError('deleteHero')));\n  }\n  static #_ = this.ɵfac = function HeroService_Factory(t) {\n    return new (t || HeroService)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HeroService,\n    factory: HeroService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["of","HttpHeaders","catchError","tap","HeroService","constructor","messageService","http","heroesUrl","httpOptions","headers","getHeroes","get","pipe","_","log","handleError","getHero","id","url","operation","result","error","console","message","add","updateHero","hero","put","addHero","post","newHero","deleteHero","delete","i0","ɵɵinject","i1","MessageService","i2","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\Library\\Documents\\__Source\\TourOfHeroes\\tour-of-heroes\\src\\app\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeroService {\n\n  private heroesUrl = 'api/heroes';  // URL to web api\n\n  constructor(private messageService: MessageService, private http: HttpClient) { }\n\n  getHeroes(): Observable<Hero[]> {\n    return this.http.get<Hero[]>(this.heroesUrl)\n      .pipe(\n        tap(_=> this.log('fetched heroes')),\n        catchError(this.handleError<Hero[]>('getHeroes', []))\n      );\n  }\n\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id: number): Observable<Hero> {\n    const url = `${this.heroesUrl}/${id}`; // backticks ( ` ) define a JavaScript template literal for embedding the id.\n    return this.http.get<Hero>(url).pipe(\n      tap(_=> this.log(`fetched hero id=${id}`)),\n      catchError(this.handleError<Hero>(`getHero id=${id}`))\n      );\n  }\n\n  /**\n * Handle Http operation that failed.\n * Let the app continue.\n *\n * @param operation - name of the operation that failed\n * @param result - optional value to return as the observable result\n */\nprivate handleError<T>(operation = 'operation', result?: T) {\n  return (error: any): Observable<T> => {\n\n    // TODO: send the error to remote logging infrastructure\n    console.error(error); // log to console instead\n\n    // TODO: better job of transforming error for user consumption\n    this.log(`${operation} failed: ${error.message}`);\n\n    // Let the app keep running by returning an empty result.\n    return of(result as T);\n  };\n}\n\n  /** Log a HeroService message with the MessageService */\n  private log(message: string) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  \n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n    /** PUT: update the hero on the server */\n    updateHero(hero: Hero): Observable<any> {\n      return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(\n        tap(_ => this.log(`updated hero id=${hero.id}`)),\n        catchError(this.handleError<any>('updateHero'))\n      );\n    }\n\n  /** POST: add a new hero to the server */\n  addHero(hero: Hero): Observable<Hero> {\n    return this.http.post<Hero>(this.heroesUrl, hero, this.httpOptions).pipe(\n      tap((newHero: Hero) => this.log(`added hero w/ id=${newHero.id}`)),\n      catchError(this.handleError<Hero>('addHero'))\n    );\n  }\n\n  /** DELETE: delete the hero from the server */\n  deleteHero(id: number): Observable<Hero> {\n    const url = `${this.heroesUrl}/${id}`; // backticks ( ` ) define a JavaScript template literal for embedding the id.\n\n    return this.http.delete<Hero>(url, this.httpOptions).pipe(\n      tap(_=> this.log(`deleted hero id=${id}`)),\n      catchError(this.handleError<Hero>('deleteHero'))\n    );\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}